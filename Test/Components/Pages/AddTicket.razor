@page "/add"

<div class="container add-ticket-container">
<h3>Dodaj zg³oszenie serwisowe</h3>
<!-- Formularz -->
<div class="editForm">
<EditForm Model="@ticket" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div>
		<label>Imie klienta:  </label> <br />
		<InputText @bind-Value="ticket.ClientName"/>
	</div>
	<div>
		<label>Nazwa urz¹dzenia:  </label> <br />
		<InputText @bind-Value="ticket.Device" />
	</div>
	<div>
		<label>Krótki opis:  </label> <br />
		<InputTextArea @bind-Value="ticket.Description" />
	</div>
	<div>
		<label>Plik do dodania: </label> <br />
		<InputFile OnChange="OnInputFileChange" multiple />
	</div>
	<button class="btn btn-primary" type="submit">Dodaj zg³oszenie</button>

</EditForm>
	</div>
@if (isSubmitted)
{
	<div class="alert alert-success mt-3">
		Zg³oszenie zosta³o dodane pomyœlnie!
	</div>
}
</div>
@code{

	private Ticket ticket = new Ticket();
	private bool isSubmitted = false;

	private void HandleValidSubmit()
	{
		TicketService.AddTicket(ticket); //Dodajemy zg³oszenie do Listy zg³oszeñ w TicketService
		// Logika dodawania zg³oszenia serwisowego
		isSubmitted = true;
		ticket = new Ticket(); // Resetowanie formularza po dodaniu zg³oszenia

	}

	// Metoda obs³uguj¹ca zmianê pliku
	private async Task OnInputFileChange(InputFileChangeEventArgs e)
	{
		var files = e.GetMultipleFiles(); // Pobieramy wiele plików
		foreach (var file in files) // Iterujemy przez ka¿dy plik
		{
			var buffer = new byte[file.Size]; // Tworzymy bufor o rozmiarze pliku
			await file.OpenReadStream().ReadAsync(buffer); // Odczytujemy plik do bufora

			ticket.Attachments.Add(new Attachment
			{
					FileName = file.Name,
					ContentType = file.ContentType,
					Data = buffer // Przechowujemy dane pliku w obiekcie Attachment
			});
		}
	}


}