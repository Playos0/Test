@page "/Tickets"
<ConfirmWindow @ref="confirmWindow" Message="Czy na pewno chcesz usunąć to zgłoszenie?" OnConfirm="OnConfirm" />

<h3>Zgłoszenia serwisowe</h3>

<!-- Lista zgłoszeń serwisowych -->
@if (tickets != null && tickets.Any())
{
	<table class="table">
		<thead>
			<tr>
				<th>Imię klienta</th>
				<th>Nazwa urządzenia</th>
				<th>Opis zgłoszenia</th>
				<th>Status</th>
				<th>Data dodania</th>	
			</tr>
		</thead>
		<tbody>
			@foreach (var ticket in tickets)
			{
				<tr>
					<td>@ticket.ClientName</td>
					<td>@ticket.Device</td>
					<td>@ticket.Description</td>
					<td>@ticket.Status</td>
					<td>@ticket.CreatedAt</td>
					<td>
						<!-- Możliwość dodania przycisku do edycji lub usunięcia zgłoszenia -->
						<button class="btn btn-primary" @onclick='() => ChangeStatus(ticket,"W trakcie")'>W trakcie</button>
						<button class="btn btn-success" @onclick='() => ChangeStatus(ticket,"Zakończone")'>Zakończone</button>
						<button class="btn btn-danger" @onclick='() => AskDeleteTicket(ticket)'>Usuń</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
else
{
	<p>Brak zgłoszeń serwisowych.</p>
}

@code {
	private List<Ticket> tickets = new List<Ticket>(); // Lista zgłoszeń serwisowych
	protected override void OnInitialized() // Metoda wywoływana podczas inicjalizacji
	{
		// Inicjalizacja listy zgłoszeń serwisowych
		tickets = TicketService.GetTickets(); // Pobieramy zgłoszenia z TicketService
	}
	private void ChangeStatus(Ticket ticket, string status)
	{
		ticket.Status = status; // Zmiana statusu zgłoszenia
		StateHasChanged(); // Odświeżenie, aby zmiany były widoczne
	}
	// Metoda wywoływana po potwierdzeniu usunięcia zgłoszenia
	private ConfirmWindow? confirmWindow;
	private Ticket? ticketToDelete;
	private void AskDeleteTicket(Ticket ticket)
	{
		ticketToDelete = ticket; // Zapamiętanie zgłoszenia do usunięcia
		confirmWindow?.ShowConfirmWindow(); // Wyświetlenie okna potwierdzenia
	}

	private void OnConfirm(bool confirmed)
	{
		if (confirmed && ticketToDelete != null)
		{
			DeleteTicket(ticketToDelete); // Usunięcie zgłoszenia, jeśli potwierdzono
			ticketToDelete = null; // Resetowanie zgłoszenia do usunięcia
			StateHasChanged(); // Odświeżenie, aby zmiany były widoczne
		}
	}

	private void DeleteTicket(Ticket ticket)
	{
		TicketService.DeleteTicket(ticket); // Usunięcie zgłoszenia z TicketService
		tickets.Remove(ticket); // Usunięcie zgłoszenia z listy
		StateHasChanged(); // Odświeżenie, aby zmiany były widoczne
	}


}